/*
QualDevLabsAuth

API for the QualDevLabs Auth library.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qualdevlabs_auth_go_client

import (
	"encoding/json"
)

// UserSchema struct for UserSchema
type UserSchema struct {
	Username string `json:"username"`
	Password string `json:"password"`
	RepeatPassword string `json:"repeatPassword"`
	Email string `json:"email"`
}

// NewUserSchema instantiates a new UserSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSchema(username string, password string, repeatPassword string, email string) *UserSchema {
	this := UserSchema{}
	this.Username = username
	this.Password = password
	this.RepeatPassword = repeatPassword
	this.Email = email
	return &this
}

// NewUserSchemaWithDefaults instantiates a new UserSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSchemaWithDefaults() *UserSchema {
	this := UserSchema{}
	return &this
}

// GetUsername returns the Username field value
func (o *UserSchema) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UserSchema) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UserSchema) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *UserSchema) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UserSchema) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UserSchema) SetPassword(v string) {
	o.Password = v
}

// GetRepeatPassword returns the RepeatPassword field value
func (o *UserSchema) GetRepeatPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepeatPassword
}

// GetRepeatPasswordOk returns a tuple with the RepeatPassword field value
// and a boolean to check if the value has been set.
func (o *UserSchema) GetRepeatPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RepeatPassword, true
}

// SetRepeatPassword sets field value
func (o *UserSchema) SetRepeatPassword(v string) {
	o.RepeatPassword = v
}

// GetEmail returns the Email field value
func (o *UserSchema) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserSchema) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserSchema) SetEmail(v string) {
	o.Email = v
}

func (o UserSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["username"] = o.Username
	}
	if true {
		toSerialize["password"] = o.Password
	}
	if true {
		toSerialize["repeatPassword"] = o.RepeatPassword
	}
	if true {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableUserSchema struct {
	value *UserSchema
	isSet bool
}

func (v NullableUserSchema) Get() *UserSchema {
	return v.value
}

func (v *NullableUserSchema) Set(val *UserSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSchema(val *UserSchema) *NullableUserSchema {
	return &NullableUserSchema{value: val, isSet: true}
}

func (v NullableUserSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


