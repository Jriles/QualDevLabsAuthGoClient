/*
QualDevLabsAuth

API for the QualDevLabs Auth library.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package qualdevlabs_auth_go_client

import (
	"encoding/json"
)

// UserUpdatesSchema struct for UserUpdatesSchema
type UserUpdatesSchema struct {
	Username *string `json:"username,omitempty"`
	Password *string `json:"password,omitempty"`
	RepeatPassword *string `json:"repeatPassword,omitempty"`
	Email *string `json:"email,omitempty"`
}

// NewUserUpdatesSchema instantiates a new UserUpdatesSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserUpdatesSchema() *UserUpdatesSchema {
	this := UserUpdatesSchema{}
	return &this
}

// NewUserUpdatesSchemaWithDefaults instantiates a new UserUpdatesSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserUpdatesSchemaWithDefaults() *UserUpdatesSchema {
	this := UserUpdatesSchema{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserUpdatesSchema) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdatesSchema) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserUpdatesSchema) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserUpdatesSchema) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserUpdatesSchema) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdatesSchema) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserUpdatesSchema) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserUpdatesSchema) SetPassword(v string) {
	o.Password = &v
}

// GetRepeatPassword returns the RepeatPassword field value if set, zero value otherwise.
func (o *UserUpdatesSchema) GetRepeatPassword() string {
	if o == nil || o.RepeatPassword == nil {
		var ret string
		return ret
	}
	return *o.RepeatPassword
}

// GetRepeatPasswordOk returns a tuple with the RepeatPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdatesSchema) GetRepeatPasswordOk() (*string, bool) {
	if o == nil || o.RepeatPassword == nil {
		return nil, false
	}
	return o.RepeatPassword, true
}

// HasRepeatPassword returns a boolean if a field has been set.
func (o *UserUpdatesSchema) HasRepeatPassword() bool {
	if o != nil && o.RepeatPassword != nil {
		return true
	}

	return false
}

// SetRepeatPassword gets a reference to the given string and assigns it to the RepeatPassword field.
func (o *UserUpdatesSchema) SetRepeatPassword(v string) {
	o.RepeatPassword = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserUpdatesSchema) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserUpdatesSchema) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserUpdatesSchema) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserUpdatesSchema) SetEmail(v string) {
	o.Email = &v
}

func (o UserUpdatesSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.RepeatPassword != nil {
		toSerialize["repeatPassword"] = o.RepeatPassword
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableUserUpdatesSchema struct {
	value *UserUpdatesSchema
	isSet bool
}

func (v NullableUserUpdatesSchema) Get() *UserUpdatesSchema {
	return v.value
}

func (v *NullableUserUpdatesSchema) Set(val *UserUpdatesSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUserUpdatesSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUserUpdatesSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserUpdatesSchema(val *UserUpdatesSchema) *NullableUserUpdatesSchema {
	return &NullableUserUpdatesSchema{value: val, isSet: true}
}

func (v NullableUserUpdatesSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserUpdatesSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


